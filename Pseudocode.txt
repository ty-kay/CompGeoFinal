for each site
   {
      create a site event e, 
      e.point = current site, insert e into queue
   }
   while queue is not empty
   {
      e = get the first event from the queue
      if its site event : AddParabola( e.point )
      else : RemoveParabola( e.parabola );
   }
   // done!!! :) 

   function AddParabola ( point u )
   {
      par = arc under point u;
      if (par has its circle event, when it is removed form the beachline)
         remove this event form the queue
      new arcs a, b, c;
      b.site = u;
      a.site = c.site = par.site; // site of arc is a focus of arc
      xl, xr  = left and right edges, which comes from point on par under u
      xl is a normal to  (a.site, b.site);
      xr is a normal to (b.site, c.site);
      replace par by the sequence a, xl, b, xr, c
      CheckCircleEvent(a);
      CheckCircleEvent(c);
   }
   function RemoveParabola ( Parabola p )
   {
      l = an arc lef to p;
      r = an arc on the right from p;
      if (l or r have their Circle events) remove these events from the queue
      s = the circumcenter between l.site, p.site and r.site
      x = new edge, starts at s, normal to (l.site, r.site)
      finish two neighbour edges xl, xr at point s
      replace a sequence xl, p, xr by new edge x
      CheckCircleEvent(l);
      CheckCircleEvent(r);
   }
   function CheckCircleEvent(Parabola p)
   {
      l = arc on the left to p;
      r = arc on the right to p;
      xl, xr = edges by the p
      when there is no l  OR no r  OR  l.site=r.site  RETURN
      s = middle point, where xl and xr cross each other
      when there is no s (edges go like\ /) RETURN
      r = distance between s an p.site (radius of curcumcircle)
      if s.y + r is still under the sweepline  RETURN
      e = new circle event
      e.parabola = p;
      e.y = s.y + r;
      add e into queue 
   }
